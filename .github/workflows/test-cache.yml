# This is a workflow to cache the sources for all the builds

name: test source caching and cleaning

# Controls when the workflow will run
# Triggers the workflow on push or pull request events and manually from the Actions tab
on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ github.token }}
  MAKEFLAGS: "-j 8"
  CMAKE_BUILD_PARALLEL_LEVEL: 8

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      THIRD_PARTY_CACHE_NAME_KEY: ${{ steps.tp-check.outputs.THIRD_PARTY_CACHE_NAME_KEY }}
      FOUND_THIRD_PARTY_CURRENT: ${{ steps.tp-check.outputs.FOUND_THIRD_PARTY_CURRENT }}
      CACHE_MATRIX: ${{ steps.set-cache-matrix.outputs.CACHE_MATRIX }}
      NEEDS_CACHE: ${{ steps.set-cache-matrix.outputs.NEEDS_CACHE }}
      TARGET_NAMES: ${{ steps.create-target-info.outputs.TARGET_NAMES }}
      TARGET_SHAS: ${{ steps.create-target-info.outputs.TARGET_SHAS }}
      TARGET_DIRECTORIES: ${{ steps.create-target-info.outputs.TARGET_DIRECTORIES }}
      TARGET_REPO_NAME: ${{ steps.create-target-info.outputs.TARGET_REPO_NAME }}
    steps:
      - name: Check out main third party without submodules
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v3
        with:
          path: .

      - name: Install gh cli extension actions-cache
        run: |
          type -p gh >/dev/null || {
            type -p curl >/dev/null || sudo apt install curl -y
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install gh -y
          }
          gh extension install actions/gh-actions-cache
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Find cache and Clean out old caches of thirdparty
        id: tp-check
        run: |
          echo "Fetching list of cache keys to check if any old ones need deleting"
          cachesList=$(gh api -H "Accept: application/vnd.github+json" --paginate repos/GeniusVentures/thirdparty/actions/caches?key="thirdparty" | jq ".actions_caches[].key")
          shortSHA="${${{ github.sha }}:0:7}"
          tpCacheNameSHA="\nthirdparty-$shortSHA"

          notMatched="$(comm -3 <(echo -e "$tpCacheNameSHA") <(echo -e "$cachesList" | sort))"
          oldCaches="$(comm  -13 <(echo -e "$tpCacheNameSHA") <(echo -e "$notMatched"))"
          notCached="$(comm -12 <(echo -e "$tpCacheNameSHA") <(echo -e "$notMatched"))"

          foundThirdPartyCurrent="true"
          if [[ $notCached == "$tpCacheNameSHA" ]]; then
            foundThirdPartyCurrent="false"
          fi

          #Set the field separator to new line
          IFS=$'\n'
          for oldCache in $oldCaches; do
              echo -e "Deleting old cache $oldCache"
              gh actions-cache delete $oldCache -R $REPO -B $BRANCH --confirm
          done

          echo "FOUND_THIRD_PARTY_CURRENT=$foundThirdPartyCurrent" >> $GITHUB_OUTPUT
          echo "THIRD_PARTY_CACHE_NAME_KEY=$tpCacheNameSHA" >> $GITHUB_OUTPUT

      - name: Cache main Source Files without .git, if not already cached
        if: ( steps.tp-check.outputs.FOUND_THIRD_PARTY_CURRENT == 'false' )
        uses: GeniusVentures/cache-multi@v3.2.2
        id: cache-source-directory
        with:
          path: |
            !.git/**
            ./**
          key: ${{ steps.tp-check.outputs.THIRD_PARTY_CACHE_NAME_KEY }}

      - name: Set matrix of src submodules that need updating
        id: set-cache-matrix
        run: |
          namesAndHashes=""
          while read -r mode longsha stage location; do
            shortSHA="${longsha:0:7}"
            cacheName="source/$location-$shortSHA"
            namesAndHashes+="$cacheName\n"
          done <<< $(git submodule--helper list)
          
          cachesList=$(gh api -H "Accept: application/vnd.github+json" --paginate repos/GeniusVentures/thirdparty/actions/caches?key="source/" | jq -r ".actions_caches[].key")
          
          notMatched="$(comm -3 <(echo -e "$namesAndHashes" | sort) <(echo -e "$cachesList" | sort))"
          oldCaches="$(comm -1 -3 <(echo -e "$namesAndHashes" | sort) <(echo -e "$notMatched" | sort))"
          notCached="$(comm -1 -2 <(echo -e "$namesAndHashes" | sort) <(echo -e "$notMatched" | sort))"
          
          matrixJson="[ "
          first=true
          # Set the field separator to new line
          IFS=$'\n'
          for toCache in $notCached; do
            nLength=$(( ${#toCache}-15 ))
            name="${toCache:7:$nLength}"
            matrixJson+="{ \"name\":  \"$name\", \"cache-name\": \"$toCache\" }"
            if [[ "$first" != "true" ]]; then
              matrixJson+=", "
            fi
            first=false
          done
          matrixJson+=" ]"
          
          # delete old caches
          for oldCache in $oldCaches; do
            echo "Deleting old cache $oldCache"
            gh actions-cache delete $oldCache -R $REPO -B $BRANCH --confirm
          done
          
          echo "CACHE_MATRIX=$matrixJson" >> $GITHUB_OUTPUT
          if [[ "$notCached" != "" ]]; then
            echo "NEEDS_CACHE=true" >> $GITHUB_OUTPUT
            #echo "Found $notCached new source repos to cache!"
          else
            echo "NEEDS_CACHE=false" >> $GITHUB_OUTPUT
          fi
          
#          cacheNameKeysContext="[ "
#          cachePathsContent="[ "
#          first='true'
#          for cacheNameAndHash in namesAndHashes; do
#            nLength=$(( ${#cacheNameAndHash}-15 ))
#            name="${cacheNameAndHash:7:$nLength}"
#            if [[ "$first" != "true" ]]; then
#              cacheNameKeysContext+=", "
#              cachePathsContent+=", "
#            fi
#            first='false'
#            cacheNameKeyContext+="\"$cacheNameAndHash\""
#            cachePathsContent+="[\"!./$name/.git/**\", \"./$name/**\"]"
#          done
#
#          cacheNameKeysContent+=" ]"
#          echo "CACHE_MULTI_PARAMETER_NAME_KEYS=$cacheNameKeysContent" >> $GITHUB_OUTPUT
#
#          cachePathsContent+=" ]"
#          echo "CACHE_MULTI_PARAMETER_PATHS=$cachePathsContent" >> $GITHUB_OUTPUT

        shell: bash
        working-directory: ${{github.workspace}}

      - name: Create base target library names for target cache to create
        id: create-target-info
        run: |
          pushd build/Linux >/dev/null
          if [[ ! -d Release ]]; then
          mkdir Release
          fi

          cd Release
          if [[ ! -d CMakeFiles ]]; then
          cmake .. -DCMAKE_BUILD_TYPE=Release
          fi
          cd CMakeFiles
          cMakeNamesDirsAndRepoNames="$(grep -m2 -R --include "build.make" -e "make_directory.*thirdparty/[^/]*$" -e ".*-complete:.*-build" * |
          sed -E -n 's/^(.*)\.dir.*-complete: ([^/]*?)\/src.*/\1,\2,/p; s/.*thirdparty\/([^ ]*)$/\1|/p' |
            tr -d '\n' |
            tr '|' '\n')"
          popd >/dev/null

          # Initialize the variables
          cMakeNames=""
          buildDirectoryNames=""
          repoNames=""
          shortSHAs=""
          gitSubmodules=
          #echo -e "$gitSubmodules" 1>&2
          while IFS=',' read -r cmakeName buildDir repoName; do
          
            # Append the fields to the appropriate array
            cMakeNames+="$cmakeName\n"
            buildDirectoryNames+="$buildDir\n"
            repoNames+="$repoName\n"
            longSHA=$(git submodule--helper list | grep -m1 -Fw "$repoName" | cut -d ' ' -f 2)
            shortSHAs+="${longSHA:0:7}\n"

          done <<< "$cMakeNamesDirsAndRepoNames"

          echo "TARGET_NAMES=$cMakeNames" >>$GITHUB_OUTPUT
          echo "TARGET_SHAS=$shortSHAs" >>$GITHUB_OUTPUT
          echo "TARGET_DIRECTORIES=$buildDirectoryNames" >>$GITHUB_OUTPUT
          echo "TARGET_REPO_NAME=$repoNames" >>$GITHUB_OUTPUT

        shell: bash
        working-directory: ${{github.workspace}}

  cache-src:
    needs: setup
    if: (always() && (needs.setup.outputs.NEEDS_CACHE != 'false'))
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.setup.outputs.CACHE_MATRIX) }}
    steps:
      - name: Cache Third Party Director
        uses: GeniusVentures/cache-multi/restore@v3.2.2
        id: cache-tp-source-directory
        with:
          path: |
            !.git/**
            ./**
          key: ${{ needs.setup.outputs.THIRD_PARTY_CACHE_NAME_KEY }}

      - if: (steps.cache-tp-source-directory.outputs.cache-hit != 'true')
        run: |
          echo "Couldn't find cached thirdparty code, ${{ needs.setup.outputs.THIRD_PARTY_CACHE_NAME_KEY }} fatal error!"
          exit 1

      - name: Git clone submodule source code
        run: |
          echo "Cloning source for ${{ matrix.name }}"
          git submodule update --init --recursive -- ${{ matrix.name }}
        shell: bash
        working-directory: ${{github.workspace}}

      - name: Cache Submodule Source Files without .git
        id: cache-source-directory
        uses: GeniusVentures/cache-multi@v3.2.2
        with:
          path: |
            !./${{ matrix.name }}/.git/**
            ./${{ matrix.name }}/**
          key: ${{ matrix.cache_name }}

  build-targets-matrix:
    needs: [ setup ]

    strategy:
      fail-fast: false
      matrix:
        build-type: [ Release, Debug ]
        target-build-data:
          - target-os: Linux
            runs-on: ubuntu-latest
            shell: bash
            setup-script: |
              echo "Setup for Linux Build"
#          - target-os: Android
#            runs-on: ubuntu-latest
#            shell: bash
#            setup-script: |
#              echo "Setup for Android Build"
#              git config --global core.autocrlf false
#              git config --global core.eol lf
#              echo "ANDROID_TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
#              echo "MAKEFLAGS=\"-j 8\"" >> $GITHUB_ENV
#              echo "ANDROID_NDK=$ANDROID_NDK_HOME" >> $GITHUB_ENV
#              echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
#            arch: |
#              arm64-v8a
#              x86_64
#              x86
#              armeabi-v7a
#          - target-os: OSX
#            runs-on: macos-latest
#            shell: bash
#            setup-script: |
#              echo "Setup for OSX Build"
#              find /Applications/Xcode* -maxdepth 0 -ls
#              sudo xcode-select --switch "$(find /Applications/Xcode*.app -maxdepth 0 | sort -V | tail -1)/Contents/Developer"
#              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
#            cmake-script: |
#              cd build/$TARGET_OS
#              mkdir Release
#              cd Release
#              cmake -S .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE
#              echo "Compiling $TARGET_OS version $LIBRARY_VERSION of $LIBRARY_NAME"
#              make $LIBRARY_NAME
#          - target-os: iOS
#            runs-on: macos-latest
#            shell: bash
#            setup-script: |
#              echo "Setup for iOS Build"
#              find /Applications/Xcode* -maxdepth 0 -ls
#              sudo xcode-select --switch "$(find /Applications/Xcode*.app -maxdepth 0 | sort -V | tail -1)/Contents/Developer"
#              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
#            install-uses:
#              uses: actions/setup-python@v2
#              with:
#                python-version: '3.5'
#            cmake-script: |
#              cd build/$TARGET_OS
#              mkdir Release
#              cd Release
#              cmake -S .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DiOS_ABI=arm64-v8a -DIOS_ARCH="arm64" -DENABLE_ARC=0 -DENABLE_BITCODE=0 -DENABLE_VISIBILITY=1  -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_SYSTEM_PROCESSOR=arm64 -DCMAKE_TOOLCHAIN_FILE=$WORKSPACE/build/iOS/iOS.cmake
#              echo "Compiling $TARGET_OS version $LIBRARY_VERSION of $LIBRARY_NAME"
#              make $LIBRARY_NAME
#
#          - target-os: Windows
#            runs-on: windows-2022
#            setup-script: |
#              echo "Setup for Windows Build"
#            install-uses:
#              name: Configure build for Windows 10 x64
#              uses: ilammy/msvc-dev-cmd@v1
#              with:
#                arch: amd64
#                sdk: 10.0.22621.0
#                vsversion: 17

    runs-on: ${{ matrix.target-build-data.runs-on }}
    steps:
      - name: dumping matrix for each run
        run: |
          echo "matrix: ${{ toJson(matrix) }}"
          echo "cmakeNames: ${{ needs.setup.outputs.TARGET_NAMES }}"
          echo "targetSHAs: ${{ needs.setup.outputs.TARGET_SHAS }}"
          echo "buildDirs: ${{ needs.setup.outputs.TARGET_DIRECTORIES }}"
          echo "targetRepoName: ${{ needs.setup.outputs.TARGET_REPO_NAME }}"          

      - name: Install configuration
        uses: ChristopherHX/conditional@main
        with:
          if: ${{ matrix.target-build-data.install-uses != null }}
          step: |
            uses: ${{ matrix.target-build-data.install-uses.uses || '' }}
            with: ${{ (matrix.target-build-data.install-uses.with && toJSON(matrix.target-build-data.install-uses.with)) || '{}' }}

#      - name: Get libraries to build libraries
#        run: |
#          # build array of library names
#          baseNames=(${{ fromJSON(needs.get-targets-matrix.outputs.CACHE_MULTI_PARAMETER_NAME_KEYS) }})
#          Array3=(`echo ${Array1[@]} ${Array2[@]} | tr ' ' '\n' | sort | uniq -u `)
#    uses: ./.github/workflows/Build-Artifacts.yml
#    with:
#      build-type: ${{ matrix.build-type }}
#      target-build-data: ${{ format('[ {0} ]', toJson(matrix.target-build-data)) }}
#      libraries: ${{ needs.get-targets-matrix.outputs.TARGET_LIBRARY_NAMES }}
#      CACHE_MULTI_PARAMETER_KEYS: ${{ needs.get-targets-matrix.outputs.CACHE_MULTI_PARAMETER_KEYS }}
#      CACHE_MULTI_PARAMETER_PATHS: ${{ needs.get-targets-matrix.outputs.CACHE_MULTI_PARAMETER_PATHS }}
#    secrets: inherit

