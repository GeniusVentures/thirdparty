# This is a basic workflow to help you get started with Actions

name: Release Build CI

# Controls when the workflow will run
# Triggers the workflow on push or pull request events and manually from the Actions tab
on: [push, pull_request, workflow_dispatch]
env:
  VulkanSDKVersion: 1.2.198.1
  
jobs:
  Windows:
    runs-on: windows-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: GuillaumeFalourd/setup-windows10-sdk-action@v1
        with:
          sdk-version: 19041

      - name: Install Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.0.3
        with:
          vulkan-version: ${{env.VulkanSDKVersion}}
     
      - name: Test Vulkan SDK Install
        shell: bash
        run: |
          echo "Vulkan SDK Version=='$VULKAN_SDK_VERSION'"
          echo "VULKAN_SDK=='$VULKAN_SDK'"

      - name: Create Build Directory
        run: cmake -E make_directory ${{github.workspace}}/.build

      - name: Configure CMake
        working-directory: ${{github.workspace}}/.build
        run: cmake -S ../build/Windows/ -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=Release -DCMAKE_SYSTEM_VERSION="10.0"

      - name: Compile
        working-directory: ${{github.workspace}}/.build
        run: cmake --build . --config Release

  Linux:
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Install Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.0.3
        with:
          vulkan-version: ${{env.VulkanSDKVersion}}
          
      - name: Test Vulkan SDK Install
        shell: bash
        run: |
          echo "Vulkan SDK Version=='$VULKAN_SDK_VERSION'"
          echo "VULKAN_SDK=='$VULKAN_SDK'"

      - name: Create Build Directory
        run: cmake -E make_directory ${{github.workspace}}/.build

      - name: Configure CMake
        working-directory: ${{github.workspace}}/.build
        run: cmake -S ../build/Linux/ -DCMAKE_BUILD_TYPE=Release

      - name: Compile
        working-directory: ${{github.workspace}}/.build
        run: make -j8

  Android:
    runs-on: ubuntu-latest
    env:
      ANDROID_NDK_HOME: ${{github.workspace}}/android-ndk/android-ndk-r21e
      ANDROID_TOOLCHAIN: ${{github.workspace}}/android-ndk/android-ndk-r21e/toolchains/llvm/prebuilt/linux-x86_64/bin
      NDK_URL: "https://dl.google.com/android/repository/android-ndk-r21e-linux-x86_64.zip"

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      #- uses: nttld/setup-ndk@v1
      #  id: setup-ndk
      #  with:
      #    ndk-version: r21e

      - name: Download Android NDK
        run: |
          mkdir "${{github.workspace}}/android-ndk"
          cd "${{github.workspace}}/android-ndk"
          curl -o ndk.zip ${{ env.NDK_URL }}
          unzip ndk.zip
          rm ndk.zip

      - name: Install Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.0.3
        with:
          vulkan-version: ${{env.VulkanSDKVersion}}
          
      - name: Test Vulkan SDK Install
        shell: bash
        run: |
          echo "Vulkan SDK Version=='$VULKAN_SDK_VERSION'"
          echo "VULKAN_SDK=='$VULKAN_SDK'"

      - name: Create Build Directory
        run: cmake -E make_directory ${{github.workspace}}/.build

      - name: Set PATH
        run: echo "${{env.ANDROID_TOOLCHAIN}}" >> $GITHUB_PATH

      - name: Configure CMake
        env:
          CC: clang

        working-directory: ${{github.workspace}}/.build
        run: |
          export ANDROID_NDK=${{env.ANDROID_NDK_HOME}}
          export ANDROID_NDK_HOME=${{env.ANDROID_NDK_HOME}}
          export ANDROID_TOOLCHAIN=${{env.ANDROID_TOOLCHAIN}}
          echo $PATH
          export PATH=${{env.ANDROID_TOOLCHAIN}}:$PATH
          echo $PATH
          echo $CC
          ls -la $ANDROID_TOOLCHAIN
          echo "Check clang path:"
          which clang
          env
          cmake -S ../build/Android/ -DANDROID_ABI="arm64-v8a" -DCMAKE_ANDROID_NDK=$ANDROID_NDK -DANDROID_TOOLCHAIN=clang
      - name: Compile
        working-directory: ${{github.workspace}}/.build
        run: make -j8

  MacOS:
    runs-on: macos-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          
      # Workaround for arm64 build
      - name: Ensure latest macOS SDK is used
        run: |
          sudo xcode-select --switch "$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep "Xcode_[\.0-9]*app" | sort -V | tail -1)/Contents/Developer"
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
      
      - name: Set env for Vulkan SDK
        id: env
        run: |
          VULKAN_SDK=$GITHUB_WORKSPACE/vulkansdk-macos-${{env.VulkanSDKVersion}}/macOS
          echo ::set-output name=VULKAN_SDK::$VULKAN_SDK
          echo "VK_LAYER_PATH=$VULKAN_SDK/etc/vulkan/explicit_layer.d" >> $GITHUB_ENV
          echo "VK_ICD_FILENAMES=$VULKAN_SDK/etc/vulkan/icd.d/MoltenVK_icd.json" >> $GITHUB_ENV
      - name: Cache
        id: cache
        uses: actions/cache@v1.1.2
        with:
          path: ${{steps.env.outputs.VULKAN_SDK}}
          key: VulkanSdk${{env.VulkanSDKVersion}}ExtractedMacos
      - name: Download & Extract Vulkan SDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          wget --no-cookies -O ../vulkansdk-macos-${{env.VulkanSDKVersion}}.dmg https://sdk.lunarg.com/sdk/download/${{env.VulkanSDKVersion}}/mac/vulkansdk-macos-${{env.VulkanSDKVersion}}.dmg?u=
          hdiutil attach ../vulkansdk-macos-${{env.VulkanSDKVersion}}.dmg
          ls -la /Volumes/vulkansdk-macos-${{env.VulkanSDKVersion}}
          cp -r /Volumes/vulkansdk-macos-${{env.VulkanSDKVersion}} $GITHUB_WORKSPACE
          ls -la $GITHUB_WORKSPACE/vulkansdk-macos-${{env.VulkanSDKVersion}}
          ls -la $VULKAN_SDK
          hdiutil detach /Volumes/vulkansdk-macos-${{env.VulkanSDKVersion}}
      
      - name: find_package(Vulkan)
        env:
          VULKAN_SDK: ${{steps.env.outputs.VULKAN_SDK}}
        run: |
          echo "VULKAN_SDK: $VULKAN_SDK"
          ls -la $VULKAN_SDK
          cmake --find-package -DNAME=Vulkan -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=LINK
        
      - name: Create Build Directory
        run: |
          cmake -E make_directory ${{github.workspace}}/.build

      - name: Configure CMake
        working-directory: ${{github.workspace}}/.build
        env:
          VULKAN_SDK: ${{steps.env.outputs.VULKAN_SDK}}
        run: cmake -S ../build/OSX/ -DCMAKE_BUILD_TYPE=Release
        
      - name: Compile
        working-directory: ${{github.workspace}}/.build
        env:
          VULKAN_SDK: ${{steps.env.outputs.VULKAN_SDK}}
        run: make -j8

  iOS:
    runs-on: macos-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - uses: actions/setup-python@v2
        with:
          python-version: '3.5' # Version range or exact version of a Python version to use, using SemVer's version range syntax

      - name: Create Build Directory
        run: cmake -E make_directory ${{github.workspace}}/.build

      - name: Configure CMake
        working-directory: ${{github.workspace}}/.build
        run: cmake -S ../build/iOS/ -DCMAKE_BUILD_TYPE=Release -DiOS_ABI=arm64-v8a -DIOS_ARCH="arm64" -DENABLE_ARC=0 -DENABLE_BITCODE=0 -DENABLE_VISIBILITY=1  -DCMAKE_OSX_ARCHITECTURES=arm64 -DCMAKE_SYSTEM_PROCESSOR=arm64 -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/build/iOS/iOS.cmake

      - name: Compile
        working-directory: ${{github.workspace}}/.build
        run: make -j8
