# This is a basic workflow to help you get started with Actions

name: Build ThirdParty Release

# Controls when the workflow will run
# Triggers the workflow on push or pull request events and manually from the Actions tab
on:
  workflow_dispatch:

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 8
  MAKEFLAGS: "-j 8"
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  setup:
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.matrix.outputs.value }}
      steps:


  cache_or_load_src:
    fail-fast: true
    strategy:
      fail-fast: true
      matrix:

      steps:
        - name: Check out main third party without submodules
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
          uses: actions/checkout@v3
          with:
            path: '${{github.workspace}}'

        - name: Load cached modules from other workflows
          run: |
            cmake -E make_directory ${{github.workspace}}/.build

        - name: Set PATH
          run: echo "${{env.ANDROID_TOOLCHAIN}}" >> $GITHUB_PATH

        - name: Configure CMake
          env:
            CC: clang

          working-directory: ${{github.workspace}}/.build
          run: |
            export ANDROID_NDK=${{env.ANDROID_NDK_HOME}}
            export ANDROID_NDK_HOME=${{env.ANDROID_NDK_HOME}}
            export ANDROID_TOOLCHAIN=${{env.ANDROID_TOOLCHAIN}}
            echo $PATH
            export PATH=${{env.ANDROID_TOOLCHAIN}}:$PATH
            echo $PATH
            echo $CC
            ls -la $ANDROID_TOOLCHAIN
            echo "Check clang path:"
            which clang
            env
            cmake -S ../build/Android/ -DANDROID_ABI="arm64-v8a" -DCMAKE_ANDROID_NDK=$ANDROID_NDK -DANDROID_TOOLCHAIN=clang
        - name: Compile
          working-directory: ${{github.workspace}}/.build
          run: make Boost

