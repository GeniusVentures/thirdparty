name: Build per OS

on:
  workflow_dispatch:

jobs:
  build:
    env:
      GRPC_BUILD_ENABLE_CCACHE: "ON"
    runs-on: ${{matrix.host}}
    strategy:
      fail-fast: false
      matrix:
        target: [Android, iOS, OSX, Linux, Windows]
        build_type: [Debug, Release]
        include:
          - target: Linux
            host: ubuntu-latest
          - target: Windows
            host: windows-latest
          - target: OSX
            host: macos-latest
          - target: Android
            host: ubuntu-latest
          - target: iOS
            host: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: Set clang as the default compiler
        if: ${{ matrix.host == 'ubuntu-latest' }}
        run: |
          sudo update-alternatives --install /usr/bin/cc cc $(which clang) 100
          sudo update-alternatives --install /usr/bin/c++ c++ $(which clang++) 100
          sudo update-alternatives --set cc $(which clang)
          sudo update-alternatives --set c++ $(which clang++)

      - name: Install Linux host dependencies
        if: ${{ matrix.host == 'ubuntu-latest'}}
        run: |
          sudo apt install ccache ninja-build -y
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Install Windows host dependencies
        if: ${{ matrix.host == 'windows-latest'}}
        run: |
          choco install ccache -A

      - name: Install Darwin host dependencies
        if: ${{ matrix.host == 'macos-latest'}}
        run: |
          brew install ccache ninja
          echo "CMAKE_GENERATOR=Ninja" >> $GITHUB_ENV

      - name: Add Darwin toolchain
        run: rustup target add x86_64-apple-darwin

      - name: Add iOS toolchain
        if: ${{ matrix.target == 'iOS' }}
        run: |
          rustup toolchain install nightly-aarch64-apple-darwin
          rustup component add rust-src --toolchain nightly-aarch64-apple-darwin
          rustup target add aarch64-apple-ios

      - name: Add Android toolchain
        if: ${{ matrix.target == 'Android' }}
        run: |
          rustup target add aarch64-linux-android

      - name: Install bindgen
        run: cargo install cbindgen

      - name: Add Rust target
        run: rustup target add wasm32-unknown-emscripten

      - name: Configure CMake
        run: cmake -S build/${{matrix.target}} -B build/${{matrix.target}}/${{matrix.build_type}} -DCMAKE_BUILD_TYPE=${{matrix.build_type}}

      - name: Build project
        run: cmake --build build/${{matrix.target}}/${{matrix.build_type}} --config ${{matrix.build_type}} -j
