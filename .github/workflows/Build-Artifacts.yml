# This is a reusable workflow to build libraries for Linux, Android, iOS, OSX and Windows,
# with Release, Debug variants

name: Build Third Party Artifacts

# Controls when the workflow will run
# Triggers the workflow on push or pull request events and manually from the Actions tab
on:
  workflow_call:
    inputs:
      build-type:
        required: true
        type: string
      target-build-data:
        required: true
        type: string
      libraries:
        required: true
        type: string
      CACHE_MULTI_PARAMETER_KEYS:
        required: true
        type: string
      CACHE_MULTI_PARAMETER_PATHS:
        required: true
        type: string

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 8
  MAKEFLAGS: "-j 8"
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  build-artifacts:
    strategy:
      matrix:
        libraries: ${{ fromJSON(inputs.libraries) }}
        target-build-data: ${{ fromJSON(inputs.target-build-data) }}

    runs-on: ${{ matrix.target=build-data.runs-on }}

    steps:
      - name: Restore thirdparty base directory and code
        uses: GeniusVentures/cache-multi/restore@v3.2.2
        id: cache-tp-source-directory
        with:
          path: |
            !.git/**
            ./**
          key: thirdparty-${{ github.sha }}

      - name: Load the source Cache(s) into the system
        uses: GeniusVentures/cache-multi/restoremulti@v3.2.2
        with:
          keys: ${{ inputs.CACHE_MULTI_PARAMETER_KEYS }}
          paths: ${{ inputs.CACHE_MULTI_PARAMETER_PATHS }}

      - name: dumping matrix for each run
        run: |
          cat <<"EOF"
            build-data: ${{ inputs.target-build-data }}
            matrix: ${{ toJson(matrix) }}
            uses: ${{ matrix.target_build_data.install-uses.uses || '/dev/null' }}
            with: ${{ matrix.target_build_data.install-uses.with || '' }}
          EOF
      #        shell: ${{ matrix.target-build-data.shell }}Í

#      - if: matrix.target-build-data.install-uses
#        name: ${{ matrix.target-build-data.install-uses.name || "Executing uses step" }}
#        uses: ${{ matrix.target-build-data.install-uses.uses || "/dev/null" }}
#        with: ${{ fromJSON(matrix.target-build-data.install-uses.with || {} ) }}
#
#
#      - if: matrix.target-build-data.setup-script
#        name: "Executing Setup Script"
#        run: |
#          ${{ matrix.target-build-data.setup-script }}
#        working-directory: ${{ github.workspace }}
#        shell: ${{ matrix.target-build-data.shell }}
#
#      - name: Build artifact
#        run: |
#          ${{ matrix.target-build-data.cmake-script }}
#        working-directory: ${{ github.workspace }}
#        shell: ${{ matrix.target-build-data.shell }}
#
#      - name: Create tar for artifact
#        run: |
#          tar --posix --use-compress-program zstdmt -cf ../lib-${{ matrix.target-build-data.libraries.libraryName }}.tzst
#        working-directory: ${{ github.workspace }}/build/${{ matrix.target-os}}/Release/${{ matrix.target-build-data.libraries.libraryName }}
#        shell: ${{ matrix.target-build-data.shell }}
#
#      - name: Upload artifact
#        uses: actions/upload-artifact@v3
#        with:
#          name: lib-${{ matrix.target-build-data.libraries.libraryName }}-${{ env.LIBRARY_VERSION }}.tzst
#          path: ${{ github.workspace }}/build/${{ matrix.target-os}}/Release/lib-${{ matrix.target-build-data.libraries.libraryName }}.tzst
#

