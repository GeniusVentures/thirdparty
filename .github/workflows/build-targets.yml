# This is a workflow to cache the sources for all the builds

name: Build Matrix of Libraries

# Controls when the workflow will run
# Triggers the workflow on push or pull request events and manually from the Actions tab
on:
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      CACHE_NAME_SHAS: ${{ steps.set-matrix.outputs.CACHE_NAME_SHAS }}
      HAS_MATRIX_VALUES: ${{ steps.set-matrix.outputs.HAS_MATRIX_VALUES }}
    steps:
      - name: Cache main Source Files without .git
        uses: GeniusVentures/cache-multi@v3.2.2
        id: cache-source-directory
        with:
          path: |
            !.git/**
            ${{github.workspace}}/**
          key: thirdparty-${{ github.sha }}

      - name: Check out main third party without submodules
        if: steps.cache-source-directory.outputs.cache-hit != 'true'
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v3
        with:
          path: ${{github.workspace}}

      - name: Install gh cli extension actions-cache
        run: |
          gh extension install actions/gh-actions-cache
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Clean out old caches of thirdparty
        run: |          
          
          echo "Fetching list of cache keys"
          cacheKeys=$(gh actions-cache list -R $REPO -B $BRANCH --key "thirdparty-" | cut -f 1 | sed '/thirdparty-/!d' )
          
          # Setting this to not fail the workflow while deleting cache keys. 
          set +e
          if [[ ! -z "$cacheKeys" ]]; then
            echo "Deleting caches..."
            for cacheKey in $cacheKeys
            do
                gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
            done
            echo "Done"
          fi

      - name: Set matrix of submodules that need updating
        id: set-matrix
        run: |
          content=$(git submodule)
          jsonContent="{ \"include\": [  "
          toCacheCount=0
          cacheNameSHAS=""
          cacheEmpty=$(gh actions-cache list -R $REPO -B $BRANCH --limit 1 | sed -e '/There are no Actions caches/!d' )
          while read longSHA name version; do
            longSHA="${longSHA/'-'/}"
            shortSHA="${longSHA:0:7}"
            # if not empty, then we need to append a comma
            if [[ ! -z "$cacheNameSHAS" ]]; then
              cacheNameSHAS+=","
            fi
            cacheNameSHAS+="$name,$shortSHA"

            needCacheRepo="true"
            if [[ -z "$cacheEmpty" ]]; then
              # check if cache key exists, if so, we don't need to update this source
              foundCachedRepo=$(gh actions-cache list -R $REPO -B $BRANCH --key \"$name-$shortSHA\" | cut -f 1 | sed ":$name-$shortSHA:"'!d')
              if [[ -z "$foundCachedRepo" ]]; then
                needCacheRepo=""
                echo "Found $name cached Repo for SHA: $shortSHA"
                cacheEmpty="true"
                # delete previous caches
                oldCaches=$(gh actions-cache list -R $REPO -B $BRANCH --key \"$name-\" | cut -f 1 | sed ":$name-:"'!d')
                # Setting this to not fail the workflow while deleting cache keys.
                set +e
                if [[ ! -z "$oldCaches" ]]; then
                  echo "Deleting caches..."
                  for cacheKey in $oldCaches
                  do
                    gh actions-cache delete $cacheKey -R $REPO -B $BRANCH --confirm
                  done
                fi
              else
                needCacheRepo="false"
              fi
            fi

            if  [[ ! -z "$needCacheRepo" ]]; then
              if (( $toCacheCount > 0 )); then
               jsonContent+=","
              fi
              (( toCacheCount+=1 ))
              jsonContent+="{ \"name\": \"$name\", \"shortSHA\": \"$shortSHA\", \"longSHA\": \"$longSHA\" }"

            fi
          done <<<"$content"
          echo "$cacheNameSHAS"
          jsonContent+="] }"
          echo "matrix=$jsonContent" >> $GITHUB_OUTPUT
          echo "CACHE_NAME_SHAS=$cacheNameSHAS" >> $GITHUB_OUTPUT
          if (( $toCacheCount > 0 )); then
            echo "HAS_MATRIX_VALUES='true'" >> $GITHUB_OUTPUT
          else
            echo "HAS_MATRIX_VALUES='false'" >> $GITHUB_OUTPUT
          fi
          echo "Found $toCacheCount new source repos to cache!"
        shell: bash
        working-directory: ${{github.workspace}}

  cache-src:
    needs: setup
    runs-on: ubuntu-latest
    if: ${{ always() && (needs.setup.outputs.HAS_MATRIX_VALUES }}
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.setup.outputs.matrix) }}
    steps:
      - uses: GeniusVentures/cache-multi@v3.2.2
        id: cache-tp-source-directory
        with:
          path: |
            !.git/**
            ${{github.workspace}}/**
          key: thirdparty-${{ github.sha }}

      - if: steps.cache-tp-source-directory.outputs.cache-hit != 'true'
        run: |
          echo "Couldn't find cached thirdparty code, thirdparty-${{ github.sha }} fatal error!"
          exit 1

      - name: Cache Submodule Source Files without .git
        id: cache-source-directory
        uses: GeniusVentures/cache-multi@v3.2.2
        with:
          path: |
            !.git/**
            ${{github.workspace}}/${{ matrix.name }}/**
          key: ${{ matrix.name }}-${{ matrix.shortSHA }}

      - name: Git clone submodule source code
        if: steps.cache-source-directory.outputs.cache-hit != 'true'
        run: |
          echo "Cloning source for ${{ matrix.name }}"
          git submodule update --init --recursive -- ${{ matrix.name }}
        shell: bash
        working-directory: ${{github.workspace}}

  get-targets-matrix:
    needs: [setup, cache-src]
    if: ${{ always() && !cancelled() && !contains(needs.*.result,'failure') }}
    runs-on: ubuntu-latest
    steps:
      - uses: GeniusVentures/cache-multi/restore@v3.2.2
        id: cache-tp-source-directory
        with:
          path: |
            !.git/**
            ${{github.workspace}}/**
          key: thirdparty-${{ github.sha }}

      - if: steps.cache-tp-source-directory.outputs.cache-hit != 'true'
        run: |
          echo "Couldn't find cached thirdparty code, thirdparty-${{ github.sha }} fatal error!"
          exit 1

      - name: Install gh cli extension actions-cache
        run: |
          gh extension install actions/gh-actions-cache
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "BRANCH=${{ github.ref }}" >> $GITHUB_ENV
          echo "GH_TOKEN=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

      - name: Create Inputs for src caches to load
        id: cache-multi-parameters
        run: |
          # now reload the json content into variables list
          cacheNameSHAS=( $(echo "${{ needs.setup.outputs.CACHE_NAME_SHAS }}" | tr ',' '\n'))

          keysContent=""
          pathsContent=""
          for ((i=0; i < ${#cacheNameSHAS[@]}; i+=2)); do
            name=${cacheNameSHAS[$i]}
            shortSHA=${cacheNameSHAS[$i+1]}
            if [[ ! -z "$keysContent" ]]; then
              keysContent+=$'\n'
              pathsContent+=$'\n'
            fi
            keysContent+="$name-$shortSHA"
            pathsContent+="[\"!.git/**\", \"${{github.workspace}}/$name/**\"]"
          done
          
          echo "CACHE_MULTI_PARAMETER_KEYS<<EOF" >> $GITHUB_ENV
          echo "$keysContent" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "CACHE_MULTI_PARAMETER_PATHS<<EOF" >> $GITHUB_ENV
          echo "$pathsContent" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

        shell: bash
        working-directory: ${{github.workspace}}

      - name: Load the source Cache(s) into the system
        uses: GeniusVentures/cache-multi/restoremulti@v3.2.2
        with:
          keys: ${{ env.CACHE_MULTI_PARAMETER_KEYS }}
          paths: ${{ env.CACHE_MULTI_PARAMETER_PATHS }}

      - name: build a list of targets that will be made with cmake
        run: |
          mkdir Release
          cd Release
          cmake .. -DCMAKE_BUILD_TYPE=Release
          targetlib_array=()
          while IFS= read -r line; do
            targetlib_array+=( "$line" )
          done < <( find CMakeFiles -type d -name *.dir | sed -r "s/(.*\/)*(.*)(.dir)/- libname: \2/g" )
          echo "TARGET_LIBRARY_NAMES<<EOF" >> $GITHUB_ENV
          printf '%s\n' "${targetlib_array[@]}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        shell: bash
        working-directory: ${{github.workspace}}/build/Linux

  build-targets-matrix:
    needs: [ setup, get-targets-matrix ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        build-type: [ Release ]
        library-names: ${{ needs.get-targets-matrix.env.TARGET_LIBRARY_NAMES }}
        target-build-data:
          - target-os: linux
            runs-on: linux-latest
            setup-script: |
              echo "Setup for Linux Build"
          - target-os: android
            runs-on: linux-latest
            setup-script: |
              echo "Setup for Android Build"
              git config --global core.autocrlf false
              git config --global core.eol lf
              echo "ANDROID_TOOLCHAIN=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_ENV
              echo "MAKEFLAGS=\"-j 8\"" >> $GITHUB_ENV
              echo "ANDROID_NDK=$ANDROID_NDK_HOME" >> $GITHUB_ENV
              echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
            arch: |
              arm64-v8a
              x86_64
              x86
              armeabi-v7a
          - target-os: osx
            runs-on: macos-latest
            setup-script: |
              echo "Setup for OSX Build"
              sudo xcode-select --switch \"$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep \"Xcode_[\.0-9]*app\" | sort -V | tail -1)/Contents/Developer\"
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*\", \"\", \"\"]"
          - target-os: ios
            runs-on: macos-latest
            setup-script: |
              echo "Setup for iOS Build"
              sudo xcode-select --switch "$(find /Applications -mindepth 1 -maxdepth 1 ! -type l | grep "Xcode_[\.0-9]*app" | sort -V | tail -1)/Contents/Developer"
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*
            install-uses:
              uses: actions/setup-python@v2
              with:
                python-version: '3.5'
          - target-os: windows
            runs-on: windows2022
            setup-script: |
              echo "Setup for Windows Build"
            install-uses:
              name: Configure build for Windows 10 x64
              uses: ilammy/msvc-dev-cmd@v1
              with:
                arch: amd64
                sdk: 10.0.22621.0
                vsversion: 17

    #    steps:
#    - uses: GeniusVentures/cache-multi/restore@v3.2.2
#      id: cache-tp-source-directory
#      with:
#        path: |
#          !.git/**
#          ${{github.workspace}}/**
#        key: thirdparty-${{ github.sha }}
#
#    - if: steps.cache-tp-source-directory.outputs.cache-hit != 'true'
#      run: |
#        echo "Couldn't find cached thirdparty code, thirdparty-${{ github.sha }} fatal error!"
#        exit 1
#
#    - name: Create Inputs for src caches to load
#      id: cache-multi-parameters
#      run: |
#        # now reload the json content into variables list
#        reloadcontent=$(echo '${{ needs.setup.outputs.matrix }}' | perl -pe "s/.*?(?:\{[ \t]*?\"name\":[ \t]*?\"(.+?)\".[ \t]*?\"shortsha\":[ \t]*?\"(.+?)\"(.*?)\}),*\]*[ \t]*\}*/\1 \2\n/g")
#
#        keysJsonContent=""
#        pathsJsonContent=""
#        first="true"
#        while read name shortsha; do
#          if [[ "$first" != "true" ]]; then
#            keysJsonContent+=$'\n'
#            pathsJsonContent+=$'\n'
#          fi
#          keysJsonContent+="$name-$shortsha"
#          pathsJsonContent+="[\"!.git/**\", \"${{github.workspace}}/$name/**\"]"
#        first="false"
#        done <<<"$reloadcontent"
#        keysJsonContent+=""
#        pathsJsonContent+=""
#
#        echo "CACHE_MULTI_PARAMETER_KEYS<<EOF" >> $GITHUB_ENV
#        echo "$keysJsonContent" >> $GITHUB_ENV
#        echo "EOF" >> $GITHUB_ENV
#
#        echo "CACHE_MULTI_PARAMETER_PATHS<<EOF" >> $GITHUB_ENV
#        echo "$pathsJsonContent" >> $GITHUB_ENV
#        echo "EOF" >> $GITHUB_ENV
#
#      shell: bash
#      working-directory: ${{github.workspace}}
#
#    - name: Load the source Cache(s) into the system
#      uses: GeniusVentures/cache-multi/restoremulti@v3.2.2
#      with:
#        keys: ${{ env.CACHE_MULTI_PARAMETER_KEYS }}
#        paths: ${{ env.CACHE_MULTI_PARAMETER_PATHS }}

    steps:
      - name: dumping matrix for each run
        run: |
          cat <<"EOF"
            matrix: ${{ toJson(matrix) }}
          EOF
          
