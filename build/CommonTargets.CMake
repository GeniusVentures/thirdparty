# GTest
ExternalProject_Add(GTest
    PREFIX GTest
    SOURCE_DIR "${THIRDPARTY_DIR}/GTest"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    ${_CMAKE_COMMON_CACHE_ARGS}
)
set(_FINDPACKAGE_GTEST_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/GTest/lib/cmake/GTest")

# Build protoc for host OS.
if(CMAKE_CROSSCOMPILING)
    set(PROTOBUF_HOST_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/protobuf_host")
    set(PROTOBUF_TARGET protobuf_host)

    ExternalProject_Add(protobuf_host
        PREFIX ${PROTOBUF_HOST_PREFIX}
        SOURCE_DIR "${THIRDPARTY_DIR}/grpc/third_party/protobuf"
        CMAKE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
        CMAKE_CACHE_ARGS
        -DABSL_BUILD_TESTING:BOOL=OFF
        -DBUILD_TESTING:BOOL=OFF
        -DCMAKE_BUILD_TYPE:STRING=Release
        -DCMAKE_CXX_STANDARD:STRING=${CMAKE_CXX_STANDARD}
        -Dprotobuf_BUILD_TESTS:BOOL=OFF
        -Dprotobuf_MODULE_COMPATIBLE:BOOL=ON
        -Dprotobuf_INSTALL:BOOL=ON
    )
else()
    set(PROTOBUF_HOST_PREFIX "${CMAKE_CURRENT_BINARY_DIR}/grpc")
    set(PROTOBUF_TARGET grpc)
endif()

if(MSVC)
    set(Protobuf_HOST_DIR "${PROTOBUF_HOST_PREFIX}/cmake")
else()
    set(Protobuf_HOST_DIR "${PROTOBUF_HOST_PREFIX}/lib/cmake/protobuf")
endif()

set(absl_HOST_DIR "${PROTOBUF_HOST_PREFIX}/lib/cmake/absl")
set(utf8_range_HOST_DIR "${PROTOBUF_HOST_PREFIX}/lib/cmake/utf8_range")

set(PROTOBUF_HOST_INCLUDE_DIR "${PROTOBUF_HOST_PREFIX}/include")
set(PROTOBUF_HOST_LIB_DIR "${PROTOBUF_HOST_PREFIX}/lib")
set(PROTOC_EXECUTABLE "${PROTOBUF_HOST_PREFIX}/bin/protoc${CMAKE_EXECUTABLE_SUFFIX}")

# zlib
ExternalProject_Add(zlib
    PREFIX zlib
    SOURCE_DIR "${THIRDPARTY_DIR}/zlib"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DZLIB_BUILD_EXAMPLES:BOOL=FALSE
    -DBUILD_TESTS:BOOL=FALSE
    -DBUILD_SHARED_LIBS:BOOL=FALSE
    ${_CMAKE_COMMON_CACHE_ARGS}
    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
)
ExternalProject_Get_Property(zlib INSTALL_DIR)
set(ZLIB_ROOT ${INSTALL_DIR})

# c-ares
ExternalProject_Add(cares
    PREFIX cares
    SOURCE_DIR "${THIRDPARTY_DIR}/c-ares"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DCARES_STATIC:BOOL=ON
    -DCARES_SHARED:BOOL=OFF
    ${_CMAKE_COMMON_CACHE_ARGS}
)
ExternalProject_Get_Property(cares INSTALL_DIR)
set(_FINDPACKAGE_CARES_CONFIG_DIR "${INSTALL_DIR}/lib/cmake/c-ares")
set(_FINDPACKAGE_CARES_LIBRARY_DIR "${INSTALL_DIR}/lib")
set(_FINDPACKAGE_CARES_INCLUDE_DIR "${INSTALL_DIR}/include")

# gRPC
ExternalProject_Add(grpc
    PREFIX grpc
    SOURCE_DIR "${THIRDPARTY_DIR}/grpc"
    CMAKE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    CMAKE_CACHE_ARGS
    ${_CMAKE_COMMON_CACHE_ARGS}
    -DABSL_ENABLE_INSTALL:BOOL=ON
    -DABSL_PROPAGATE_CXX_STD:BOOL=ON
    -DBUILD_SHARED_LIBS:BOOL=OFF
    -DBUILD_TESTING:BOOL=OFF
    -Dc-ares_DIR:PATH=${_FINDPACKAGE_CARES_CONFIG_DIR}
    -DCMAKE_CXX_STANDARD:STRING=${CMAKE_CXX_STANDARD}
    -DgRPC_BUILD_CODEGEN:BOOL=OFF
    -DgRPC_BUILD_CSHARP_EXT:BOOL=OFF
    -DgRPC_BUILD_GRPC_CPP_PLUGIN:BOOL=OFF
    -DgRPC_BUILD_GRPC_CSHARP_PLUGIN:BOOL=OFF
    -DgRPC_BUILD_GRPC_NODE_PLUGIN:BOOL=OFF
    -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN:BOOL=OFF
    -DgRPC_BUILD_GRPC_PHP_PLUGIN:BOOL=OFF
    -DgRPC_BUILD_GRPC_PYTHON_PLUGIN:BOOL=OFF
    -DgRPC_BUILD_GRPC_RUBY_PLUGIN:BOOL=OFF
    -DgRPC_CARES_PROVIDER:STRING=package
    -DgRPC_INSTALL:BOOL=ON
    -DgRPC_SSL_PROVIDER:STRING=package
    -DgRPC_ZLIB_PROVIDER:STRING=package
    -Dprotobuf_ABSL_PROVIDER:STRING=package
    -Dprotobuf_MODULE_COMPATIBLE:BOOL=ON
    -Dprotobuf_MSVC_STATIC_RUNTIME:BOOL=ON
    -DRE2_BUILD_TESTING:BOOL=OFF
    -DZLIB_ROOT:PATH=${ZLIB_ROOT}
    -DZLIB_USE_STATIC_LIBS:BOOL=ON
    ${_OPENSSL_CACHE_ARGS}
    DEPENDS openssl zlib cares
)

ExternalProject_Get_Property(grpc INSTALL_DIR)

# absl
set(absl_DIR "${INSTALL_DIR}/lib/cmake/absl")

# utf8_range
set(utf8_range_DIR "${INSTALL_DIR}/lib/cmake/utf8_range")

# Protobuf
if(MSVC)
    set(Protobuf_DIR "${INSTALL_DIR}/cmake")
else()
    set(Protobuf_DIR "${INSTALL_DIR}/lib/cmake/protobuf")
endif()

set(Protobuf_LIBRARIES "${INSTALL_DIR}/lib")
set(Protobuf_INCLUDE_DIR "${INSTALL_DIR}/include")

# RocksDB
ExternalProject_Add(rocksdb
    PREFIX rocksdb
    SOURCE_DIR "${THIRDPARTY_DIR}/rocksdb"
    CMAKE_ARGS
    -DWITH_TRACE_TOOLS:BOOL=$<CONFIG:Debug>
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DFAIL_ON_WARNINGS:BOOL=OFF
    -DPORTABLE:BOOL=ON
    -DROCKSDB_BUILD_SHARED:BOOL=OFF
    -DROCKSDB_INSTALL_ON_WINDOWS:BOOL=ON
    -DWITH_ALL_TESTS:BOOL=OFF
    -DWITH_BENCHMARK_TOOLS:BOOL=OFF
    -DWITH_CORE_TOOLS:BOOL=OFF
    -DWITH_GFLAGS:BOOL=OFF
    -DWITH_MD_LIBRARY:BOOL=OFF
    -DWITH_RUNTIME_DEBUG:BOOL=ON
    -DWITH_TESTS:BOOL=OFF
    -DWITH_TOOLS:BOOL=OFF
    ${_CMAKE_COMMON_CACHE_ARGS}
    ${_rocksdb_EXTRA_PARAM}
)
set(_FINDPACKAGE_ROCKSDB_DIR "${CMAKE_CURRENT_BINARY_DIR}/rocksdb/lib/cmake/rocksdb")
set(_FINDPACKAGE_ROCKSDB_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/rocksdb/include")

# GSL
ExternalProject_Add(Microsoft.GSL
    PREFIX Microsoft.GSL
    SOURCE_DIR "${THIRDPARTY_DIR}/GSL"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DGSL_TEST:BOOL=OFF
    ${_CMAKE_COMMON_CACHE_ARGS}
)
set(_FINDPACKAGE_GSL_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/Microsoft.GSL/include")

# fmt
ExternalProject_Add(fmt
    PREFIX fmt
    SOURCE_DIR "${THIRDPARTY_DIR}/fmt"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    ${_CMAKE_COMMON_CACHE_ARGS}
    -DBUILD_SHARED_LIBS:BOOL=OFF
    -DFMT_DOC:BOOL=OFF
    -DFMT_TEST:BOOL=OFF
)

set(_FINDPACKAGE_FMT_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/fmt/lib/cmake/fmt")
set(_FINDPACKAGE_FMT_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/fmt/lib")
set(_FINDPACKAGE_FMT_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/fmt/include")

# spdlog
ExternalProject_Add(spdlog
    PREFIX spdlog
    SOURCE_DIR "${THIRDPARTY_DIR}/spdlog"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
    -DSPDLOG_BUILD_EXAMPLE:BOOL=OFF
    -DSPDLOG_FMT_EXTERNAL:BOOL=ON
    ${_CMAKE_COMMON_CACHE_ARGS}
    DEPENDS fmt
)
set(_FINDPACKAGE_SPDLOG_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/spdlog/include")
set(_FINDPACKAGE_SPDLOG_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/spdlog/lib/cmake/spdlog")

# tsl_hat_trie
ExternalProject_Add(tsl_hat_trie
    PREFIX tsl_hat_trie
    SOURCE_DIR "${THIRDPARTY_DIR}/hat-trie"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    ${_CMAKE_COMMON_CACHE_ARGS}
)
set(_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/tsl_hat_trie/lib/cmake/tsl_hat_trie")
set(_FINDPACKAGE_TSL_HAT_TRIE_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/tsl_hat_trie/include")

# Boost.DI
ExternalProject_Add(Boost.DI
    PREFIX Boost.DI
    SOURCE_DIR "${THIRDPARTY_DIR}/Boost.DI"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DBOOST_DI_OPT_BUILD_TESTS:BOOL=OFF
    -DBOOST_DI_OPT_BUILD_EXAMPLES:BOOL=OFF
    -DBOOST_DI_OPT_INSTALL:BOOL=ON
    ${_BOOST_CACHE_ARGS}
    ${_CMAKE_COMMON_CACHE_ARGS}
    DEPENDS Boost
)
set(_FINDPACKAGE_BOOST_DI_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/Boost.DI/lib/cmake/Boost.DI")
set(_FINDPACKAGE_BOOST_DI_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/Boost.DI/include")

# yaml-cpp
ExternalProject_Add(yaml-cpp
    PREFIX yaml-cpp
    SOURCE_DIR "${THIRDPARTY_DIR}/yaml-cpp"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DYAML_BUILD_SHARED_LIBS:BOOL=OFF
    -DYAML_CPP_BUILD_CONTRIB:BOOL=OFF
    -DYAML_CPP_BUILD_TOOLS:BOOL=OFF
    -DYAML_MSVC_SHARED_RT:BOOL=OFF
    ${_CMAKE_COMMON_CACHE_ARGS}
)

set(_FINDPACKAGE_YAMLCPP_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/yaml-cpp/lib/cmake/yaml-cpp")
set(_FINDPACKAGE_YAMLCPP_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/yaml-cpp/lib")
set(_FINDPACKAGE_YAMLCPP_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/yaml-cpp/include")

# Copies STB headers
file(GLOB STB_HEADERS "${THIRDPARTY_DIR}/stb/*.h")

ExternalProject_Add(STB
    PREFIX stb
    SOURCE_DIR "${THIRDPARTY_DIR}/stb"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory ${CMAKE_CURRENT_BINARY_DIR}/stb/include
    COMMAND ${CMAKE_COMMAND} -E copy_if_different ${STB_HEADERS} ${CMAKE_CURRENT_BINARY_DIR}/stb/include/
)

# soralog
ExternalProject_Add(soralog
    PREFIX soralog
    SOURCE_DIR "${THIRDPARTY_DIR}/soralog"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DHUNTER_ENABLED:BOOL=OFF
    -DEXAMPLES:BOOL=OFF
    -DTESTING:BOOL=OFF
    -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
    -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
    ${_CMAKE_COMMON_CACHE_ARGS}
    DEPENDS fmt yaml-cpp
)

set(_FINDPACKAGE_SORALOG_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/soralog/lib/cmake/soralog")
set(_FINDPACKAGE_SORALOG_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/soralog/lib")
set(_FINDPACKAGE_SORALOG_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/soralog/include")

# SQLite3
ExternalProject_Add(sqlite3
    PREFIX sqlite3
    SOURCE_DIR "${THIRDPARTY_DIR}/sqlite3"
    CMAKE_ARGS
    -DENABLE_DEBUG:BOOL=$<CONFIG:Debug>
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DENABLE_SHARED:BOOL=OFF
    -DENABLE_STATIC:BOOL=ON
    -DBUILD_SHELL:BOOL=OFF
    ${_CMAKE_COMMON_CACHE_ARGS}
)

set(_FINDPACKAGE_SQLITE3_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/sqlite3/cmake")
set(_FINDPACKAGE_SQLITE3_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/sqlite3/lib")
set(_FINDPACKAGE_SQLITE3_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/sqlite3/include")

# SQLiteModernCpp
ExternalProject_Add(SQLiteModernCpp
    PREFIX SQLiteModernCpp
    SOURCE_DIR "${THIRDPARTY_DIR}/SQLiteModernCpp"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    ${_CMAKE_COMMON_CACHE_ARGS}
    -DHUNTER_ENABLED:BOOL=OFF
    -Dsqlite3_DIR:PATH=${_FINDPACKAGE_SQLITE3_CONFIG_DIR}
    -DENABLE_INSTALL:BOOL=ON
    DEPENDS sqlite3
)

set(_FINDPACKAGE_SQLITECPP_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/SQLiteModernCpp/lib/cmake/SQLiteModernCpp")
set(_FINDPACKAGE_SQLITECPP_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/SQLiteModernCpp/lib")
set(_FINDPACKAGE_SQLITECPP_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/SQLiteModernCpp/include")

# libp2p
ExternalProject_Add(libp2p
    PREFIX libp2p
    SOURCE_DIR "${THIRDPARTY_DIR}/libp2p"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -Dabsl_DIR:PATH=${absl_DIR}
    -DBoost.DI_DIR:PATH=${_FINDPACKAGE_BOOST_DI_CONFIG_DIR}
    -Dc-ares_DIR:PATH=${_FINDPACKAGE_CARES_CONFIG_DIR}
    -DCLANG_FORMAT:BOOL=OFF
    -DCLANG_TIDY:BOOL=OFF
    -DCMAKE_USE_OPENSSL:BOOL=ON
    -DEXAMPLES:BOOL=OFF
    -DEXPOSE_MOCKS:BOOL=ON
    -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
    -DHUNTER_ENABLED:BOOL=OFF
    -DProtobuf_DIR:PATH=${Protobuf_DIR}
    -Dprotobuf_MODULE_COMPATIBLE:BOOL=ON
    -DProtobuf_PROTOC_EXECUTABLE:FILEPATH=${PROTOC_EXECUTABLE}
    -Dsoralog_DIR:PATH=${_FINDPACKAGE_SORALOG_CONFIG_DIR}
    -Dsqlite3_DIR:PATH=${_FINDPACKAGE_SQLITE3_CONFIG_DIR}
    -DSQLiteModernCpp_DIR:PATH=${_FINDPACKAGE_SQLITECPP_CONFIG_DIR}
    -DTESTING:BOOL=OFF
    -Dtsl_hat_trie_DIR:PATH=${_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR}
    -Dutf8_range_DIR:PATH=${utf8_range_DIR}
    -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
    ${_BOOST_CACHE_ARGS}
    ${_OPENSSL_CACHE_ARGS}
    ${_CMAKE_COMMON_CACHE_ARGS}
    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\ -I\ ${_FINDPACKAGE_GSL_INCLUDE_DIR}\ -I\ ${_FINDPACKAGE_SQLITE3_INCLUDE_DIR}
    DEPENDS Boost Microsoft.GSL openssl cares ${PROTOBUF_TARGET} fmt yaml-cpp soralog tsl_hat_trie Boost.DI SQLiteModernCpp grpc
)
set(_FINDPACKAGE_libp2p_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/libp2p/lib/cmake/libp2p")
set(_FINDPACKAGE_libp2p_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/libp2p/lib")
set(_FINDPACKAGE_LIBP2P_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/libp2p/include")

# MNN
ExternalProject_Add(MNN
    PREFIX MNN
    SOURCE_DIR "${THIRDPARTY_DIR}/MNN"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DMNN_BUILD_SHARED_LIBS:BOOL=OFF
    -DMNN_BUILD_TESTS:BOOL=OFF
    -DMNN_BUILD_TOOLS:BOOL=OFF
    -DMNN_BUILD_PROTOBUFFER:BOOL=OFF
    -DMNN_VULKAN:BOOL=ON
    -DMNN_WIN_RUNTIME_MT:BOOL=ON
    ${_CMAKE_COMMON_CACHE_ARGS}
    ${_MNN_EXTRA_PARAM}
)

set(_FINDPACKAGE_MNN_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/MNN/lib/cmake/mnn")
set(_FINDPACKAGE_MNN_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/MNN/lib")
set(_FINDPACKAGE_MNN_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/MNN/include")

# ipfs-lite-cpp
ExternalProject_Add(ipfs-lite-cpp
    PREFIX ipfs-lite-cpp
    SOURCE_DIR "${THIRDPARTY_DIR}/ipfs-lite-cpp"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -Dabsl_DIR:PATH=${absl_DIR}
    -DBoost_NO_SYSTEM_PATHS:BOOL=ON
    -DBoost.DI_DIR:PATH=${_FINDPACKAGE_BOOST_DI_CONFIG_DIR}
    -Dc-ares_DIR:PATH=${_FINDPACKAGE_CARES_CONFIG_DIR}
    -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
    -Dlibp2p_DIR:PATH=${_FINDPACKAGE_libp2p_CONFIG_DIR}
    -DProtobuf_DIR:PATH=${Protobuf_DIR}
    -Dprotobuf_MODULE_COMPATIBLE:BOOL=ON
    -DProtobuf_PROTOC_EXECUTABLE:FILEPATH=${PROTOC_EXECUTABLE}
    -DRocksDB_DIR:PATH=${_FINDPACKAGE_ROCKSDB_DIR}
    -Dsoralog_DIR:PATH=${_FINDPACKAGE_SORALOG_CONFIG_DIR}
    -Dspdlog_DIR:PATH=${_FINDPACKAGE_SPDLOG_CONFIG_DIR}
    -Dsqlite3_DIR:PATH=${_FINDPACKAGE_SQLITE3_CONFIG_DIR}
    -DSQLiteModernCpp_DIR:PATH=${_FINDPACKAGE_SQLITECPP_CONFIG_DIR}
    -Dtsl_hat_trie_DIR:PATH=${_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR}
    -Dutf8_range_DIR:PATH=${utf8_range_DIR}
    -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
    ${_CMAKE_COMMON_CACHE_ARGS}
    -DTESTING:BOOL=${TESTING}
    ${_BOOST_CACHE_ARGS}
    ${_OPENSSL_CACHE_ARGS}
    ${ipfs-lite-cpp_EXTRA_PARAM}
    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\ -I\ ${_FINDPACKAGE_GSL_INCLUDE_DIR}
    DEPENDS Microsoft.GSL spdlog tsl_hat_trie libp2p grpc ${PROTOBUF_TARGET} rocksdb Boost.DI
)
set(_FINDPACKAGE_IPFS_LITE_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-lite-cpp/cmake/ipfs-lite-cpp")
set(_FINDPACKAGE_IPFS_LITE_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-lite-cpp/lib")
set(_FINDPACKAGE_IPFS_LITE_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-lite-cpp/include")
set(_FINDPACKAGE_CBOR_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-lite-cpp/include/deps/tinycbor/src")

# ipfs-pubsub
ExternalProject_Add(ipfs-pubsub
    PREFIX ipfs-pubsub
    SOURCE_DIR "${THIRDPARTY_DIR}/ipfs-pubsub"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -Dabsl_DIR:PATH=${absl_DIR}
    -DBoost.DI_DIR:PATH=${_FINDPACKAGE_BOOST_DI_CONFIG_DIR}
    -Dc-ares_DIR:PATH=${_FINDPACKAGE_CARES_CONFIG_DIR}
    -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
    -Dipfs-lite-cpp_DIR:PATH=${_FINDPACKAGE_IPFS_LITE_CONFIG_DIR}
    -Dipfs-lite-cpp_INCLUDE_DIR:PATH=${_FINDPACKAGE_IPFS_LITE_INCLUDE_DIR}
    -Dlibp2p_DIR:PATH=${_FINDPACKAGE_libp2p_CONFIG_DIR}
    -DProtobuf_DIR:PATH=${Protobuf_DIR}
    -Dsoralog_DIR:PATH=${_FINDPACKAGE_SORALOG_CONFIG_DIR}
    -Dspdlog_DIR:PATH=${_FINDPACKAGE_SPDLOG_CONFIG_DIR}
    -Dsqlite3_DIR:PATH=${_FINDPACKAGE_SQLITE3_CONFIG_DIR}
    -DSQLiteModernCpp_DIR:PATH=${_FINDPACKAGE_SQLITECPP_CONFIG_DIR}
    -DTESTING:BOOL=${TESTING}
    -Dtsl_hat_trie_DIR:PATH=${_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR}
    -Dutf8_range_DIR:PATH=${utf8_range_DIR}
    -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
    ${_CMAKE_COMMON_CACHE_ARGS}
    ${_BOOST_CACHE_ARGS}
    ${_OPENSSL_CACHE_ARGS}
    ${ipfs-pubsub_EXTRA_PARAM}
    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\ -I\ ${_FINDPACKAGE_GSL_INCLUDE_DIR}
    DEPENDS Microsoft.GSL spdlog tsl_hat_trie libp2p Boost.DI ipfs-lite-cpp
)
set(_FINDPACKAGE_IPFS_PUBSUB_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-pubsub/lib/cmake/ipfs-pubsub")
set(_FINDPACKAGE_IPFS_PUBSUB_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-pubsub/lib")
set(_FINDPACKAGE_IPFS_PUBSUB_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-pubsub/include")

# ipfs-bitswap-cpp
ExternalProject_Add(ipfs-bitswap-cpp
    PREFIX ipfs-bitswap-cpp
    SOURCE_DIR "${THIRDPARTY_DIR}/ipfs-bitswap-cpp"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -Dabsl_DIR:PATH=${absl_DIR}
    -DBoost.DI_DIR:PATH=${_FINDPACKAGE_BOOST_DI_CONFIG_DIR}
    -Dc-ares_DIR:PATH=${_FINDPACKAGE_CARES_CONFIG_DIR}
    -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
    -Dlibp2p_DIR:PATH=${_FINDPACKAGE_libp2p_CONFIG_DIR}
    -DProtobuf_DIR:PATH=${Protobuf_DIR}
    -DProtobuf_INCLUDE_DIR:PATH=${Protobuf_INCLUDE_DIR}
    -DProtobuf_PROTOC_EXECUTABLE:FILEPATH=${PROTOC_EXECUTABLE}
    -Dsoralog_DIR:PATH=${_FINDPACKAGE_SORALOG_CONFIG_DIR}
    -Dspdlog_DIR:PATH=${_FINDPACKAGE_SPDLOG_CONFIG_DIR}
    -Dsqlite3_DIR:PATH=${_FINDPACKAGE_SQLITE3_CONFIG_DIR}
    -DSQLiteModernCpp_DIR:PATH=${_FINDPACKAGE_SQLITECPP_CONFIG_DIR}
    -DTESTING:BOOL=${TESTING}
    -Dtsl_hat_trie_DIR:PATH=${_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR}
    -Dutf8_range_DIR:PATH=${utf8_range_DIR}
    -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
    ${_CMAKE_COMMON_CACHE_ARGS}
    ${_BOOST_CACHE_ARGS}
    ${_OPENSSL_CACHE_ARGS}
    ${ipfs-bitswap-cpp_EXTRA_PARAM}
    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}\ -I\ ${_FINDPACKAGE_GSL_INCLUDE_DIR}
    DEPENDS Microsoft.GSL spdlog libp2p Boost
)
set(_FINDPACKAGE_IPFS_BITSWAP_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-bitswap-cpp/lib/cmake/ipfs-bitswap-cpp")
set(_FINDPACKAGE_IPFS_BITSWAP_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-bitswap-cpp/lib")
set(_FINDPACKAGE_IPFS_BITSWAP_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/ipfs-bitswap-cpp/include")

# ed25519
ExternalProject_Add(ed25519
    PREFIX ed25519
    SOURCE_DIR "${THIRDPARTY_DIR}/ed25519"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DHUNTER_ENABLED:BOOL=OFF
    -DEDIMPL:STRING=ref10
    -DHASH:STRING=sha3_brainhub
    -DRANDOM:STRING=${_ED25519_RANDOM}
    -DBUILD:STRING=STATIC
    -DTESTING:BOOL=OFF
    ${_CMAKE_COMMON_CACHE_ARGS}
)
set(_FINDPACKAGE_ed25519_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/ed25519/lib/cmake/ed25519")

# sr25519-donna
ExternalProject_Add(sr25519-donna
    PREFIX sr25519-donna
    SOURCE_DIR "${THIRDPARTY_DIR}/sr25519-donna"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DTESTING:BOOL=OFF
    -DBUILD_SHARED_LIBS:BOOL=OFF
    -DHASH_USE_SHA3_BRAINHUB:BOOL=ON
    ${_CMAKE_COMMON_CACHE_ARGS}
)

# RapidJSON
ExternalProject_Add(rapidjson
    PREFIX rapidjson
    SOURCE_DIR "${THIRDPARTY_DIR}/rapidjson"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DRAPIDJSON_BUILD_TESTS:BOOL=OFF
    -DRAPIDJSON_BUILD_EXAMPLES:BOOL=OFF
    -DHUNTER_ENABLED:BOOL=OFF
    -DBUILD_SHARED_LIBS:BOOL=FALSE
    ${_CMAKE_COMMON_CACHE_ARGS}
)

# libsecp256k1
ExternalProject_Add(libsecp256k1
    PREFIX libsecp256k1
    SOURCE_DIR "${THIRDPARTY_DIR}/libsecp256k1"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -DSECP256K1_BUILD_BENCHMARK:BOOL=OFF
    -DSECP256K1_BUILD_CTIME_TESTS:BOOL=OFF
    -DSECP256K1_BUILD_EXHAUSTIVE_TESTS:BOOL=OFF
    -DSECP256K1_BUILD_TESTS:BOOL=OFF
    -DSECP256K1_ENABLE_MODULE_RECOVERY:BOOL=ON
    ${_CMAKE_COMMON_CACHE_ARGS}
)

# For Android use NDK builtin vulkan header, otherwise add as an external project
if(FALSE) # NOT ANDROID)
    # Vulkan-Headers
    ExternalProject_Add(Vulkan-Headers
        PREFIX Vulkan-Headers
        SOURCE_DIR "${THIRDPARTY_DIR}/Vulkan-Headers"
        CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
        ${_CMAKE_COMMON_CACHE_ARGS}
    )

    # Vulkan-Loader
    ExternalProject_Add(Vulkan-Loader
        PREFIX Vulkan-Loader
        SOURCE_DIR "${THIRDPARTY_DIR}/Vulkan-Loader"
        CMAKE_CACHE_ARGS
        -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
        -DVULKAN_HEADERS_INSTALL_DIR:PATH=${CMAKE_CURRENT_BINARY_DIR}/Vulkan-Headers
        -DBUILD_WSI_WAYLAND_SUPPORT:BOOL=OFF
        -DBUILD_WSI_XCB_SUPPORT:BOOL=OFF
        -DBUILD_WSI_XLIB_SUPPORT:BOOL=OFF
        -DUSE_GAS:BOOL=OFF
        -DUPDATE_DEPS:BOOL=ON
        ${_CMAKE_COMMON_CACHE_ARGS}
        DEPENDS Vulkan-Headers
    )
endif()

# xxhash
ExternalProject_Add(xxhash
    PREFIX xxhash
    SOURCE_DIR "${THIRDPARTY_DIR}/xxhash"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    ${_CMAKE_COMMON_CACHE_ARGS}
)

# protobuf-plugin
ExternalProject_Add(protobuf-plugin
    PREFIX protobuf-plugin
    SOURCE_DIR "${THIRDPARTY_DIR}/wallet-core/protobuf-plugin"
    INSTALL_DIR protobuf-plugin
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -Dabsl_DIR:PATH=${absl_HOST_DIR}
    -DProtobuf_DIR:PATH=${Protobuf_HOST_DIR}
    -Dprotobuf_MODULE_COMPATIBLE:BOOL=ON
    -DTW_USE_EXTERNAL_PROTOC:BOOL=TRUE
    -Dutf8_range_DIR:PATH=${utf8_range_HOST_DIR}
    ${_MSVC_RUNTIME_LIBRARY}
    DEPENDS ${PROTOBUF_TARGET}
)
ExternalProject_Get_Property(protobuf-plugin INSTALL_DIR)
set(ProtobufPlugin_DIR ${INSTALL_DIR})

# wallet-core
if(NOT DEFINED _WALLET_CORE_GENERATE_SCRIPT)
    set(_WALLET_CORE_GENERATE_SCRIPT "${THIRDPARTY_DIR}/wallet-core/tools/generate-files")
endif()

find_program(CBINDGEN NAMES cbindgen)

if(NOT CBINDGEN)
    message(FATAL_ERROR "cbindgen not found")
endif()

STRING(TOLOWER ${CMAKE_SYSTEM_NAME} _WALLET_CORE_ARCH)

ExternalProject_Add(wallet-core
    PREFIX wallet-core
    SOURCE_DIR "${THIRDPARTY_DIR}/wallet-core"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -Dabsl_DIR:PATH=${absl_DIR}
    -DProtobuf_DIR:PATH=${Protobuf_DIR}
    -Dprotobuf_MODULE_COMPATIBLE:BOOL=ON
    -DTESTING:BOOL=${TESTING}
    -DTW_STATIC_LIBRARY:BOOL=TRUE
    -DTW_UNIT_TESTS:BOOL=FALSE
    -DTW_USE_EXTERNAL_PROTOC:BOOL=TRUE
    -Dutf8_range_DIR:PATH=${utf8_range_DIR}
    ${_CMAKE_COMMON_CACHE_ARGS}
    ${_BOOST_CACHE_ARGS}
    ${_OPENSSL_CACHE_ARGS}
    ${_GRPC_CACHE_ARGS}
    PATCH_COMMAND ${_WALLET_CORE_GENERATE_SCRIPT} --target-os=${_WALLET_CORE_ARCH} --arch-abi=${WALLET_CORE_ARCH_ABI} --protobuf-dir=${PROTOBUF_HOST_PREFIX} --out-dir=<INSTALL_DIR> --plugin-dir=${ProtobufPlugin_DIR}/bin
    DEPENDS Boost grpc openssl protobuf-plugin
)

# libssh2
ExternalProject_Add(libssh2
    PREFIX libssh2
    SOURCE_DIR "${THIRDPARTY_DIR}/libssh2"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    ${_CMAKE_COMMON_CACHE_ARGS}
    -DBUILD_EXAMPLES:BOOL=OFF
    -DBUILD_STATIC_LIBS:BOOL=ON
    -DCRYPTO_BACKEND:STRING=OpenSSL
    -DZLIB_ROOT:PATH=${ZLIB_ROOT}
    -DZLIB_USE_STATIC_LIBS:BOOL=ON
    -DCRYPTO_BACKEND:STRING=OpenSSL
    ${_OPENSSL_CACHE_ARGS}
    DEPENDS openssl zlib
)

set(_FINDPACKAGE_LIBSSH2_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/libssh2/lib/cmake/libssh2")
set(_FINDPACKAGE_LIBSSH2_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/libssh2/lib")
set(_FINDPACKAGE_LIBSSH2_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/libssh2/include")

# AsyncIOManager
ExternalProject_Add(AsyncIOManager
    PREFIX AsyncIOManager
    SOURCE_DIR "${THIRDPARTY_DIR}/AsyncIOManager"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    -Dabsl_DIR:PATH=${absl_DIR}
    -DBoost.DI_DIR:PATH=${_FINDPACKAGE_BOOST_DI_CONFIG_DIR}
    -DBoost.DI_DIR:PATH=${_FINDPACKAGE_BOOST_DI_CONFIG_DIR}
    -Dc-ares_DIR:PATH=${_FINDPACKAGE_CARES_CONFIG_DIR}
    -DCBOR_INCLUDE_DIR:PATH=${_FINDPACKAGE_CBOR_INCLUDE_DIR}
    -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
    -DGSL_INCLUDE_DIR:PATH=${_FINDPACKAGE_GSL_INCLUDE_DIR}
    -Dipfs-bitswap-cpp_DIR:PATH=${_FINDPACKAGE_IPFS_BITSWAP_CONFIG_DIR}
    -Dipfs-lite-cpp_DIR:PATH=${_FINDPACKAGE_IPFS_LITE_CONFIG_DIR}
    -Dipfs-lite-cpp_INCLUDE_DIR:PATH=${_FINDPACKAGE_IPFS_LITE_INCLUDE_DIR}
    -Dipfs-pubsub_DIR:PATH=${_FINDPACKAGE_IPFS_PUBSUB_CONFIG_DIR}
    -Dlibp2p_DIR:PATH=${_FINDPACKAGE_libp2p_CONFIG_DIR}
    -DLibssh2_DIR:PATH=${_FINDPACKAGE_LIBSSH2_CONFIG_DIR}
    -DMNN_INCLUDE_DIR:PATH=${_FINDPACKAGE_MNN_INCLUDE_DIR}
    -DMNN_LIBRARY_DIR:PATH=${_FINDPACKAGE_MNN_LIBRARY_DIR}
    -DProtobuf_DIR:PATH=${Protobuf_DIR}
    -DProtobuf_PROTOC_EXECUTABLE:FILEPATH=${PROTOC_EXECUTABLE}
    -DRocksDB_DIR:PATH=${_FINDPACKAGE_ROCKSDB_DIR}
    -Dsoralog_DIR:PATH=${_FINDPACKAGE_SORALOG_CONFIG_DIR}
    -Dspdlog_DIR:PATH=${_FINDPACKAGE_SPDLOG_CONFIG_DIR}
    -Dsqlite3_DIR:PATH=${_FINDPACKAGE_SQLITE3_CONFIG_DIR}
    -DSQLiteModernCpp_DIR:PATH=${_FINDPACKAGE_SQLITECPP_CONFIG_DIR}
    -Dtsl_hat_trie_DIR:PATH=${_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR}
    -Dutf8_range_DIR:PATH=${utf8_range_DIR}
    -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
    ${_BOOST_CACHE_ARGS}
    ${_OPENSSL_CACHE_ARGS}
    ${_CMAKE_COMMON_CACHE_ARGS}
    DEPENDS libssh2 openssl ipfs-lite-cpp ipfs-bitswap-cpp grpc ${PROTOBUF_TARGET} Boost MNN
)
set(_FINDPACKAGE_ASIOMGR_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/AsyncIOManager/lib/cmake/AsyncIOManager")
set(_FINDPACKAGE_ASIOMGR_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/AsyncIOManager/lib")
set(_FINDPACKAGE_ASIOMGR_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/AsyncIOManager/include")

# gnus_upnp
ExternalProject_Add(gnus_upnp
    PREFIX gnus_upnp
    SOURCE_DIR "${THIRDPARTY_DIR}/gnus_upnp"
    CMAKE_CACHE_ARGS
    -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
    ${_CMAKE_COMMON_CACHE_ARGS}
    -DBoost.DI_DIR:PATH=${_FINDPACKAGE_BOOST_DI_CONFIG_DIR}
    -Dfmt_DIR:PATH=${_FINDPACKAGE_FMT_CONFIG_DIR}
    -DGSL_INCLUDE_DIR:PATH=${_FINDPACKAGE_GSL_INCLUDE_DIR}
    -Dtsl_hat_trie_DIR:PATH=${_FINDPACKAGE_TSL_HAT_TRIE_CONFIG_DIR}
    -Dyaml-cpp_DIR:PATH=${_FINDPACKAGE_YAMLCPP_CONFIG_DIR}
    ${_BOOST_CACHE_ARGS}
    ${_OPENSSL_CACHE_ARGS}
    DEPENDS Boost fmt yaml-cpp tsl_hat_trie
)
set(_FINDPACKAGE_GNUS_UPNP_CONFIG_DIR "${CMAKE_CURRENT_BINARY_DIR}/gnus_upnp/lib/cmake/gnus_upnp")
set(_FINDPACKAGE_GNUS_UPNP_LIBRARY_DIR "${CMAKE_CURRENT_BINARY_DIR}/gnus_upnp/lib")
set(_FINDPACKAGE_GNUS_UPNP_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/gnus_upnp/include")

# jsonrpc-lean
install(
    DIRECTORY ${THIRDPARTY_DIR}/jsonrpc-lean
    DESTINATION ${CMAKE_CURRENT_BINARY_DIR}/jsonrpc-lean
)
