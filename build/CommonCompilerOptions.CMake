# C++ standard version
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# ProcessorCount
include(ProcessorCount)
ProcessorCount(PROCESSOR_COUNT)

# Convenience settings
if(NOT DEFINED CMAKE_COLOR_DIAGNOSTICS)
    set(CMAKE_COLOR_DIAGNOSTICS ON)
endif()

# Set PROJECT_BUILD folder
get_filename_component(PROJECT_BUILD_FOLDER "${CMAKE_CURRENT_SOURCE_DIR}" DIRECTORY ABSOLUTE)
get_filename_component(PROJECT_SRC_FOLDER "${PROJECT_BUILD_FOLDER}" DIRECTORY ABSOLUTE)

include(${PROJECT_BUILD_FOLDER}/cmake.in/functions.cmake)
include(ExternalProject)

# Boost
set(BOOST_VARIANT $<IF:$<CONFIG:Debug>,debug,release>)

# Workaround for on GitHub actions, probably permission error - get_BOOST_version(BOOST_VERSION "${THIRDPARTY_DIR}/boost/boost/version.hpp")
set(BOOST_MAJOR_VERSION "1" CACHE STRING "Boost Major Version")
set(BOOST_MINOR_VERSION "85" CACHE STRING "Boost Minor Version")
set(BOOST_PATCH_VERSION "0" CACHE STRING "Boost Patch Version")

set(BOOST_VERSION "${BOOST_MAJOR_VERSION}.${BOOST_MINOR_VERSION}.${BOOST_PATCH_VERSION}")
set(BOOST_VERSION_3U "${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}_${BOOST_PATCH_VERSION}")
set(BOOST_VERSION_2U "${BOOST_MAJOR_VERSION}_${BOOST_MINOR_VERSION}")

set(BOOST_ROOT "${CMAKE_CURRENT_BINARY_DIR}/boost/build/${CMAKE_SYSTEM_NAME}")

if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    set(TP_BUILD_SUBDIR "OSX")
else()
    set(TP_BUILD_SUBDIR ${CMAKE_SYSTEM_NAME})
endif()

if(MSVC)
    set(_MSVC_RUNTIME_LIBRARY
        -DCMAKE_POLICY_DEFAULT_CMP0091:STRING=NEW
        -DCMAKE_MSVC_RUNTIME_LIBRARY:STRING=MultiThreaded$<$<CONFIG:Debug>:Debug>
    )
endif()

string(STRIP "${CMAKE_CXX_FLAGS}" CMAKE_CXX_FLAGS)

set(_CMAKE_COMMON_CACHE_ARGS
    -DBUILD_SHARED_LIBS:BOOL=OFF
    -DBUILD_TESTING:BOOL=OFF
    -DCMAKE_BUILD_TYPE:STRING=${CMAKE_BUILD_TYPE}
    -DCMAKE_C_FLAGS_DEBUG:STRING=${CMAKE_C_FLAGS_DEBUG}
    -DCMAKE_C_FLAGS_RELEASE:STRING=${CMAKE_C_FLAGS_RELEASE}
    -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}
    -DCMAKE_CXX_FLAGS_DEBUG:STRING=${CMAKE_CXX_FLAGS_DEBUG}
    -DCMAKE_CXX_FLAGS_RELEASE:STRING=${CMAKE_CXX_FLAGS_RELEASE}
    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
    -DCMAKE_CXX_STANDARD:STRING=${CMAKE_CXX_STANDARD}
    -DCMAKE_FIND_PACKAGE_PREFER_CONFIG:BOOL=ON
    -DCMAKE_POLICY_DEFAULT_CMP0057:STRING=NEW
    -DCMAKE_POLICY_DEFAULT_CMP0074:STRING=NEW
    -DCMAKE_POLICY_DEFAULT_CMP0144:STRING=NEW
    -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
    -DCMAKE_TOOLCHAIN_FILE:FILEPATH=${CMAKE_TOOLCHAIN_FILE}
    -DCMAKE_VS_GLOBALS:STRING=${CMAKE_VS_GLOBALS}
    ${_MSVC_RUNTIME_LIBRARY}
)

set(THIRDPARTY_DIR "${PROJECT_SRC_FOLDER}")

if(NOT EXISTS "${THIRDPARTY_DIR}/build")
    message(FATAL_ERROR "Unable to find thirdparty source folder ${THIRDPARTY_DIR}")
endif()

# Boost settings
set(BOOST_INCLUDE_LIBRARIES container date_time filesystem log program_options random regex system test timer)

list(JOIN BOOST_INCLUDE_LIBRARIES "," BOOST_INCLUDE_LIBRARIES_COMMA_SEPARATED)
separate_arguments(BOOST_B2_FLAGS NATIVE_COMMAND "${CMAKE_CXX_FLAGS}")
list(APPEND BOOST_B2_FLAGS "-fPIC")
#list(APPEND BOOST_B2_FLAGS "--with-test")
list(TRANSFORM BOOST_B2_FLAGS PREPEND "cxxflags=")

# OpenSSL
string(REPLACE ";" "-" OSX_ARCHITECTURES_DASH_SEPARATED "${CMAKE_OSX_ARCHITECTURES}")
set(OPENSSL_VARIANT $<IF:$<CONFIG:Debug>,--debug,--release>)
